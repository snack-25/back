name: 'Snack25 Backend Deploy' # 워크플로우 이름

on:
  push:
    branches:
      - main # 메인 브랜치에 push가 되면 deploy jobs 트리거(실행)

jobs:
  deploy-to-ec2-whenever-push-to-main:
    name: 'main 브랜치에 push가 되면 EC2로 배포하는 작업'
    runs-on: ubuntu-latest # 우분투(24.04.2) 환경에서 deploy jobs 실행

    steps:
      - name: Checkout Repository # 1. 레포지토리를 체크아웃
        uses: actions/checkout@v4 # actions/checkout 레포지토리의 v4 버전 사용

      - name: Setup Node.js # 2. Node.js 설정
        uses: actions/setup-node@v4 # actions/setup-node 레포지토리의 v4 버전 사용
        with:
          node-version: '22' # Node.js 버전 22 사용
          run_install: false # 이미 설치되어 있으므로 설치하지 않음

      - name: Setup pnpm # pnpm 설정
        uses: pnpm/action-setup@v4 # pnpm/action-setup 레포지토리의 v4 버전 사용
        with:
          version: '10' # pnpm 버전 10 사용
          run_install: false # 이미 설치되어 있으므로 설치하지 않음

      - name: Cache dependencies # 의존성 캐싱
        uses: actions/cache@v4 # actions/cache 레포지토리의 v4 버전 사용
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .pnpm-store  # pnpm store 디렉토리 추가
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }} # 캐시 키 설정
          restore-keys: |
            ${{ runner.os }}-pnpm- # 캐시 키 복원

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts # 빌드에 필요한 devDependencies도 설치
        env:
          CI: ${{ secrets.CI }}

      - name: Generate Prisma Client # Prisma 클라이언트 생성
        run: pnpm prisma generate # pnpm을 사용하여 Prisma 클라이언트 생성
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }} # 데이터베이스 URL

      - name: Build Project # NestJS 빌드
        run: pnpm build # pnpm을 사용하여 빌드
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }} # 환경 변수 설정
          CI: ${{ secrets.CI }} # CI 환경 변수 설정

      - name: Upload Build Artifact # 빌드 결과물 업로드
        uses: actions/upload-artifact@v4 # actions/upload-artifact 레포지토리의 v4 버전 사용
        with:
          name: build # 업로드할 파일 이름
          path: |
            dist
            package.json
            pnpm-lock.yaml
            prisma
            node_modules/.prisma/client

      - name: Configure SSH # SSH 설정
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_${{ secrets.EC2_KEY_PAIR_TYPE }}
          chmod 600 ~/.ssh/id_${{ secrets.EC2_KEY_PAIR_TYPE }}
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Validate Environment Variables # 환경 변수 검증
        run: |
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "DATABASE_URL is not set"
            exit 1
          fi
          # 다른 필수 환경 변수들도 검증
          if [ -z "${{ secrets.EC2_HOST }}" ]; then
            echo "EC2_HOST is not set"
            exit 1
          fi
          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "EC2_SSH_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DEPLOY_VERIFY_KEY }}" ]; then
            echo "DEPLOY_VERIFY_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.EC2_USERNAME }}" ]; then
            echo "EC2_USERNAME is not set"
            exit 1
          fi
          if [ -z "${{ secrets.EC2_KEY_PAIR_TYPE }}" ]; then
            echo "EC2_KEY_PAIR_TYPE is not set"
            exit 1
          fi
          if [ -z "${{ secrets.GPG_PASSPHRASE }}" ]; then
            echo "GPG_PASSPHRASE is not set"
            exit 1
          fi
          if [ -z "${{ secrets.NODE_ENV }}" ]; then
            echo "NODE_ENV is not set"
            exit 1
          fi

      - name: Mask Sensitive Variables # 민감한 변수 마스킹
        run: |
          echo "::add-mask::${{ secrets.DATABASE_URL }}"
          echo "::add-mask::${{ secrets.EC2_HOST }}"
          echo "::add-mask::${{ secrets.EC2_SSH_KEY }}"
          echo "::add-mask::${{ secrets.DEPLOY_VERIFY_KEY }}"
          echo "::add-mask::${{ secrets.EC2_USERNAME }}"
          echo "::add-mask::${{ secrets.EC2_KEY_PAIR_TYPE }}"
          echo "::add-mask::${{ secrets.GPG_PASSPHRASE }}"
          echo "::add-mask::${{ github.sha }}"

      - name: Create env file # 환경 변수 암호화
        run: |
          echo "::add-mask::$(echo DATABASE_URL=${DATABASE_URL})"
          echo "DATABASE_URL=${DATABASE_URL}" | gpg --symmetric --batch --passphrase "${{ secrets.GPG_PASSPHRASE }}" > .env.production.gpg
          scp -i ~/.ssh/id_${{ secrets.EC2_KEY_PAIR_TYPE }} .env.production.gpg ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/backend/
          echo "::add-mask::$(cat .env.production)"

      - name: Setup PM2 Config # PM2 설정
        run: |
          echo "module.exports = {
            apps: [{
              name: 'snack25-be',
              script: 'dist/main.js',
              instances: 'max',
              autorestart: true,
              watch: false,
              max_memory_restart: '1G',
              env: {
                NODE_ENV: 'production'
              }
            }]
          }" > ecosystem.config.js
          scp -i ~/.ssh/id_${{ secrets.EC2_KEY_PAIR_TYPE }} ecosystem.config.js ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/backend/

      - name: Configure Environment
        run: |
          # 환경 변수 파일 생성 시 마스킹
          echo "::add-mask::$(echo NODE_ENV=${NODE_ENV})"
          echo "NODE_ENV=${NODE_ENV}" >> .env.production
          echo "::add-mask::$(echo DATABASE_URL=${DATABASE_URL})"
          echo "DATABASE_URL=${DATABASE_URL}" >> .env.production

          # SSH 키 마스킹
          echo "::add-mask::$(cat ~/.ssh/id_${{ secrets.EC2_KEY_PAIR_TYPE }})"

          # 배포 경로 마스킹
          echo "::add-mask::~/backend"

      - name: Backup current deployment
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/backend && \
          if [ -d dist ] || [ -d node_modules ]; then \
            backup_file="backup-$(date +%Y%m%d_%H%M%S).tar.gz" && \
            echo "Creating backup: $backup_file" && \
            tar -czf "$backup_file" dist node_modules || true; \
          else \
            echo "No existing deployment to backup"; \
          fi'

      - name: Deploy to EC2 # EC2로 배포
        timeout-minutes: 5 # 타임아웃 시간 설정
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          KEY_PAIR_TYPE: ${{ secrets.EC2_KEY_PAIR_TYPE }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DEPLOY_VERIFY_KEY: ${{ secrets.DEPLOY_VERIFY_KEY }}
          GIT_COMMIT_SHA: ${{ github.sha }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          {
            echo "Deploying to $HOST"
            ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'df -h'
            echo "Starting deployment to EC2..."
            echo "Creating .env.production file..."
            echo "DATABASE_URL=${DATABASE_URL}" > .env.production
            scp -i ~/.ssh/id_${{ secrets.EC2_KEY_PAIR_TYPE }} -r dist package.json pnpm-lock.yaml prisma ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/backend/
            scp -i ~/.ssh/id_${{ secrets.EC2_KEY_PAIR_TYPE }} .env.production ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/backend/
            scp -i ~/.ssh/id_${{ secrets.EC2_KEY_PAIR_TYPE }} ecosystem.config.js ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/backend/
            ssh -i ~/.ssh/id_${{ secrets.EC2_KEY_PAIR_TYPE }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/backend && \
              source ~/.nvm/nvm.sh && nvm use 22 && corepack enable && \
              pm2 stop snack25-be || true && pm2 delete snack25-be || true && \
              pnpm install --prod --ignore-scripts && \
              pnpm prisma generate && \
              pnpm prisma migrate deploy && \
              pm2 start ecosystem.config.js --env production'
          } 2>&1 | tee deploy.log
          echo "Deploy to EC2 작업 완료"

      - name: Rollback on Failure # 배포 실패 시 롤백
        if: failure()
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'cd ~/backend && {
            if ls backup-*.tar.gz 1> /dev/null 2>&1; then
              echo "Backup found, restoring..."
              pm2 delete snack25-be || true
              tar -xzf backup-*.tar.gz
              pm2 start ecosystem.config.js --env production
              echo "Rollback complete."
            else
              echo "No backup found, cannot rollback."
            fi
          }'

      - name: Health Check
        run: |
          curl -f http://${{ secrets.EC2_HOST }}:4000/health || exit 1

permissions:
  contents: read # 레포지토리 내용 읽기 권한
  deployments: write # 배포 권한
  id-token: write # OIDC 인증을 위해 추가 필요

concurrency:
  group: production_environment # 동시성 그룹 설정
  cancel-in-progress: false # 진행 중인 작업 취소 여부
